<!DOCTYPE html>
<html>
<head>
  <title>Cloudflare Edge Latency Tester</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
  <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>

  <style>
    body {
      font-family: 'Inter', sans-serif;
      background: #ffffff;
      color: #333;
      display: flex;
      flex-direction: column;
      align-items: center;
      padding: 2rem;
    }

    h1 {
      margin-bottom: 1rem;
      color: #f38020; /* Cloudflare orange */
    }

    button {
      background: #f38020; /* orange */
      color: white;
      border: none;
      padding: 0.75rem 1.5rem;
      border-radius: 8px;
      font-size: 1rem;
      font-weight: bold;
      cursor: pointer;
      transition: background 0.3s ease;
    }

    button:hover {
      background: #d96e16;
    }

    .cards {
      display: flex;
      gap: 1rem;
      margin-top: 1.5rem;
      flex-wrap: wrap;
      justify-content: center;
    }

    .card {
      background: #fff7f0;
      padding: 1rem 1.5rem;
      border-radius: 8px;
      box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
      min-width: 120px;
      text-align: center;
      border: 1px solid #f38020;
    }

    .card h2 {
      margin: 0;
      font-size: 1rem;
      color: #f38020;
    }

    .card p {
      margin: 0.5rem 0 0;
      font-size: 1rem;
      font-weight: bold;
      color: #333;
    }

    #chart-container {
      margin-top: 2rem;
      width: 100%;
      max-width: 600px;
      background: #fff7f0;
      padding: 1rem;
      border-radius: 8px;
      border: 1px solid #f38020;
    }

    #map {
      height: 500px;
      width: 100%;
      max-width: 800px;
      margin-top: 2rem;
      border-radius: 8px;
      border: 1px solid #f38020;
    }

    pre {
      margin-top: 1rem;
      background: #fff7f0;
      padding: 1rem;
      border-radius: 8px;
      border: 1px solid #f38020;
      max-width: 600px;
      white-space: pre-wrap;
      word-wrap: break-word;
      overflow-x: auto;
    }
  </style>
</head>
<body>
  <h1>Cloudflare Edge Latency Tester</h1>
  <button id="testBtn">Run Test</button>

  <div class="cards">
    <div class="card"><h2>Average RTT</h2><p id="avgRtt">--</p></div>
    <div class="card"><h2>Jitter</h2><p id="jitter">--</p></div>
    <div class="card"><h2>ASN</h2><p id="asn">--</p></div>
    <div class="card"><h2>Location</h2><p id="location">--</p></div>
    <div class="card"><h2>PoP</h2><p id="colo">--</p></div>
  </div>

  <div id="chart-container">
    <canvas id="latencyChart"></canvas>
  </div>

  <!-- üá∫üá∏ U.S. Map -->
  <div id="map"></div>

  <div style="margin-top:2rem; text-align:center;">
    <h2 style="color:#f38020;">AI Insights</h2>
    <select id="coloSelect">
      <option value="IAD">Ashburn (IAD)</option>
      <option value="ORD">Chicago (ORD)</option>
      <option value="EWR">Newark (EWR)</option>
    </select>
    <button onclick="getInsights()">Get Insights</button>
    <pre id="aiOutput"></pre>
  </div>

  <script>
    let chart;

    function getTimestamp() {
      return new Date().toLocaleString();
    }

    async function measureEdgeLatency() {
      const iterations = 15;
      let avg_rtt = 0;
      let diff_sum = 0;
      let jitter = 0;
      let prev = null;
      let data = null;
      const rtts = [];

      for (let i = 0; i < iterations; i++) {
        const start = performance.now();
        const res = await fetch("/ping");
        const end = performance.now();
        data = await res.json();
        const rtt = end - start;
        rtts.push(rtt);

        avg_rtt += (rtt - avg_rtt) / (i + 1);
        if (i > 0) {
          const diff = Math.abs(rtt - prev);
          diff_sum += diff;
          jitter = diff_sum / i;
        }
        prev = rtt;
      }

      document.getElementById("avgRtt").textContent = avg_rtt.toFixed(2) + " ms";
      document.getElementById("jitter").textContent = jitter.toFixed(2) + " ms";
      document.getElementById("asn").textContent = data.asn;
      document.getElementById("location").textContent = data.city + ", " + data.country;
      document.getElementById("colo").textContent = data.colo;

      // Chart
      const labels = rtts.map((_, i) => "Ping " + (i + 1));
      if (chart) chart.destroy();
      const ctx = document.getElementById("latencyChart").getContext("2d");
      chart = new Chart(ctx, {
        type: "line",
        data: {
          labels,
          datasets: [{
            label: "RTT (ms)",
            data: rtts,
            borderColor: "#f38020",
            backgroundColor: "rgba(243, 128, 32, 0.2)",
            tension: 0.2,
            fill: true,
          }]
        },
        options: {
          responsive: true,
          plugins: { legend: { display: false } },
          scales: { y: { beginAtZero: true } }
        }
      });

      await fetch("/save", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          colo: data.colo,
          timestamp: getTimestamp(),
          avg_rtt: avg_rtt.toFixed(2),
          jitter: jitter.toFixed(2),
          asn: data.asn,
          country: data.country,
          city: data.city
        })
      });

      updateMap();
    }
    document.getElementById("testBtn").addEventListener("click", measureEdgeLatency);
  </script>

  <script>
    async function getInsights() {
      const colo = document.getElementById("coloSelect").value;
      const res = await fetch(`/ai?colo=${colo}`);
      const text = await res.text();
      console.log("AI raw response:", text);

      let data;
      try {
        data = JSON.parse(text);
      } catch (e) {
        document.getElementById("aiOutput").textContent =
          `‚ùå Error: Response was not JSON\n\n${text}`;
        return;
      }

      document.getElementById("aiOutput").textContent =
        `PoP: ${colo}\n` +
        `Avg RTT: ${data.summary.avgRtt?.toFixed?.(2) || "N/A"} ms\n` +
        `Jitter: ${data.summary.avgJitter?.toFixed?.(2) || "N/A"} ms\n` +
        `Count: ${data.summary.count}\n\n` +
        `ü§ñ AI Insight: ${data.insights}`;
    }
  </script>

  <!-- üó∫Ô∏è Map with U.S. focus and PoP markers -->
  <script>
    const POP_COORDS = {
      IAD: [39.0438, -77.4874], // Ashburn, VA
      ORD: [41.9742, -87.9073], // Chicago, IL
      EWR: [40.6895, -74.1745], // Newark, NJ
      LAX: [33.9416, -118.4085], // Los Angeles, CA
      ATL: [33.6407, -84.4277], // Atlanta, GA
      DFW: [32.8998, -97.0403]  // Dallas, TX
    };

    const map = L.map("map").setView([39.5, -98.35], 4); // USA center
    L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
      attribution: "&copy; OpenStreetMap contributors",
    }).addTo(map);

    let markers = [];

    async function updateMap() {
      try {
        const res = await fetch("/all_data");
        const records = await res.json();

        // Clear old markers
        markers.forEach(m => map.removeLayer(m));
        markers = [];

        for (const rec of records) {
          const coords = POP_COORDS[rec.colo];
          if (!coords) continue;

          const color =
            rec.avg_rtt < 50 ? "green" :
            rec.avg_rtt < 100 ? "orange" : "red";

          const marker = L.circleMarker(coords, {
            radius: 10,
            color,
            fillColor: color,
            fillOpacity: 0.8
          }).addTo(map);

          marker.bindPopup(`
            <b>${rec.city}, ${rec.country}</b><br>
            PoP: ${rec.colo}<br>
            Avg RTT: ${rec.avg_rtt} ms<br>
            Jitter: ${rec.jitter} ms
          `);

          markers.push(marker);
        }
      } catch (err) {
        console.error("Map update failed:", err);
      }
    }

    updateMap();
  </script>
</body>
</html>
